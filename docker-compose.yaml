version: '3'

services:
  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - default

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.17.0"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - elasticsearch
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - default

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - database:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - default

  initdb:
    image: postgres:latest
    command: [ "bash", "-c", "sleep 5 && psql -h postgres -U ${DB_USERNAME} -c 'CREATE DATABASE ${DB_NAME}' && psql -h postgres -U ${DB_USERNAME} -d ${DB_NAME} -a -f /docker-entrypoint-initdb.d/init-script.sql" ]
    depends_on:
      - postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./Migrations/initial-migration.sql:/docker-entrypoint-initdb.d/init-script.sql


  redis:
    container_name: bloom-filter
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - default

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - default

  pp-api:
    container_name: "ppilot-api"
    ports:
      - "8000:8000"
    build:
      context: Api
      dockerfile: Dockerfile
    image: ppilot-api:latest
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST} 
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_DRIVER: ${DB_DRIVER}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      LOG_FILE_PATH: ${LOG_FILE_PATH}
      ALGORITHM: ${ALGORITHM}
      SECRET_KEY: ${SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      - redis
      - postgres
    networks:
      - default

  pp-worker:
    build:
      context: Worker
      dockerfile: Dockerfile
    image: ppilot-worker:latest
    environment:
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_QUEUE_NAME: ${RABBITMQ_QUEUE_NAME}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      ELASTICSEARCH_PORT: ${ELASTICSEARCH_PORT}
      ELASTICSEARCH_USERNAME: ${ELASTICSEARCH_USERNAME}
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      PYTHONUNBUFFERED: 1
    depends_on:
      - elasticsearch
      - rabbitmq
    networks:
      - default

  panel:

    stdin_open: true
    build:
      args:
        - REACT_APP_BASE_URL=${REACT_APP_BASE_URL}
      context: Panel
      dockerfile: Dockerfile
    image: pp-panel:latest
    ports:
      - "8080:3000"
    environment:
      REACT_APP_BASE_URL: ${REACT_APP_BASE_URL}
    depends_on:
      - pp-api
      - redis
      - postgres
    networks:
      - default


volumes:
  rabbitmq_data:
  elasticsearch_data:
  grafana_data:
  database:
  mongodb_data:

networks:
  default:
    driver: bridge